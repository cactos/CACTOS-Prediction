import simulizar_qvto_helper.logHelper;


modeltype CACT_LCORE uses 'http://www.cactosfp7.eu/LogicalDCModel/Core/1.0';
modeltype CACT_LAPP uses 'http://www.cactosfp7.eu/LogicalDCModel/Application/1.0';
modeltype CACT_PCORE uses 'http://www.cactosfp7.eu/PhysicalDCModel/Core/1.0';
modeltype CACT_PCORR uses 'http://www.cactosfp7.eu/Correspondence/Physical/1.1';
modeltype CACT_LCORR uses 'http://www.cactosfp7.eu/Correspondence/Logical/1.1';
modeltype CACT_PUTIL uses 'http://www.cactosfp7.eu/PhysicalDCModel/Util/1.0';
modeltype PCM_COMP uses 'http://palladiosimulator.org/PalladioComponentModel/Core/Composition/5.1';
modeltype PCM_ALLOC uses 'http://palladiosimulator.org/PalladioComponentModel/Allocation/5.1';
modeltype PCM_STOEX uses 'http://sdq.ipd.uka.de/StochasticExpressions/2.2';
modeltype PCM_PARAM uses 'http://palladiosimulator.org/PalladioComponentModel/Parameter/5.1';
modeltype PCM_REP uses 'http://palladiosimulator.org/PalladioComponentModel/Repository/5.1';
modeltype PCM_SEFF uses 'http://palladiosimulator.org/PalladioComponentModel/SEFF/5.1';
modeltype PCM_SYS uses 'http://palladiosimulator.org/PalladioComponentModel/System/5.1';
modeltype PCM_RES_ENV uses 'http://palladiosimulator.org/PalladioComponentModel/ResourceEnvironment/5.1';
modeltype PCM_RES_TYPE uses 'http://palladiosimulator.org/PalladioComponentModel/ResourceType/5.1';
modeltype PCM_CORE uses 'http://palladiosimulator.org/PalladioComponentModel/Core/5.1';
modeltype ACTION_MAPPING uses 'http://simulizar.palladiosimulator.org/Actions/Mapping/1.1';
modeltype ACTION_INSTANCE uses 'http://simulizar.palladiosimulator.org/Actions/Instance/1.1';
modeltype ACTION_CORE uses 'http://simulizar.palladiosimulator.org/Actions/Core/1.1';
modeltype ACTION_PARAM uses 'http://simulizar.palladiosimulator.org/Actions/Parameter/1.1';
modeltype ACTION_CONTEXT uses 'http://simulizar.palladiosimulator.org/Actions/Context/1.1';
modeltype ECORE uses 'http://www.eclipse.org/emf/2002/Ecore';
modeltype STOEX uses 'http://sdq.ipd.uka.de/StochasticExpressions/2.2';
modeltype PLM uses 'http://www.cactosfp7.eu/CactosLoadModel/Physical/1.0';
modeltype LLM uses 'http://www.cactosfp7.eu/CactosLoadModel/Logical/1.0';
modeltype OPTIMISATION_PLAN uses 'http://www.cactosfp7.eu/OptimisationPlan/1.0';
modeltype RUNTIMEMEASUREMENT uses 'http://simulizar.palladiosimulator.org/RuntimeMeasurement/1.0';
modeltype MONITOR_CORRESPONDENCE uses 'http://www.cactosfp7.eu/Correspondence/Measurement/1.1';
modeltype USAGEEVOLUTION uses "http://usageevolution/1.0";
modeltype PCM_USAGE uses 'http://palladiosimulator.org/PalladioComponentModel/UsageModel/5.1';
modeltype USAGESEQUENCE uses "http://www.cactosfp7.eu/CactoSim/UsageSequence/1.1";
modeltype METRICSPEC uses "http://palladiosimulator.org/MetricSpec/1.0";
modeltype MONITOR_REPOSITORY uses "http://palladiosimulator.org/MonitorRepository/1.0";
modeltype MEASURINGPOINT uses "http://palladiosimulator.org/PCM/MeasuringPoint/1.0";


transformation connectApplication(inout lcorrespondence : CACT_LCORR) {

	mapping inout ApplicationInstance::connectVirtualMachines(inout steps : ParallelSteps) {
		// Do nothing, as there are no VMs to connect for Black Box and Grey Box Applications	
	}
	
	mapping inout WhiteBoxApplicationInstance::connectVirtualMachines(inout steps : ParallelSteps) {
		self.map toVMConnectSteps(steps);
	}
	
	mapping WhiteBoxApplicationInstance::toVMConnectSteps(inout steps : ParallelSteps) {
		steps.optimisationSteps += self.applicationTemplate.oclAsType(WhiteBoxApplicationTemplate).vmImageConnectors->collect(connector |
			lcorrespondence.rootObjects()[LogicalCorrespondenceRepository].providedServiceCorrespondences
					->select(cactosRole = connector.serviceProvidedRole)
				->product(lcorrespondence.rootObjects()[LogicalCorrespondenceRepository].requiredServiceCorrespondences
								->select(cactosRole = connector.serviceRequiredRole))				
				->collect(t |
					object ConnectVmAction {
						source := t.second.cactosVM;
						target := t.first.cactosVM;
					}
				)
		);
	}
	
	mapping ComposedVM::toConnectActions(): Set(ConnectVmAction) {
		init {
			var vmProvRoleCorrs := lcorrespondence.rootObjects()[LogicalCorrespondenceRepository].providedServiceCorrespondences
				->select(cactosVM.id = self.virtualMachine.id);
			var providingConnectors := self.composedVMImage.applicationTemplate.oclAsType(WhiteBoxApplicationTemplate).vmImageConnectors
				->select(vmProvRoleCorrs.cactosRole->includes(serviceProvidedRole))->asSet();
			var vmReqRoleCorrs := lcorrespondence.rootObjects()[LogicalCorrespondenceRepository].requiredServiceCorrespondences
				->select(cactosVM.id = self.virtualMachine.id);
			var requiringConnectors := self.composedVMImage.applicationTemplate.oclAsType(WhiteBoxApplicationTemplate).vmImageConnectors
				->select(vmReqRoleCorrs.cactosRole->includes(serviceRequiredRole))->asSet();
			var requiringVMs := lcorrespondence.rootObjects()[LogicalCorrespondenceRepository].requiredServiceCorrespondences	
				->select(providingConnectors.serviceRequiredRole->includes(cactosRole)).cactosVM->asSet();
			result := requiringVMs->collect(vm | object ConnectVmAction {
												source := vm;
												target := self.virtualMachine;
											})->asSet();
			var providingVMs := lcorrespondence.rootObjects()[LogicalCorrespondenceRepository].providedServiceCorrespondences	
				->select(requiringConnectors.serviceProvidedRole->includes(cactosRole)).cactosVM->asSet();
			result += providingVMs->collect(vm | object ConnectVmAction {
												source := self.virtualMachine;
												target := vm;
											})->asSet();
		}
		
	}
}