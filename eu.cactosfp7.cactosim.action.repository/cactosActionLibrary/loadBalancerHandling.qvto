import m2m.qvt.oml.JScience;
import transforms.cactosAdaptationBehaviorHelper;
import transforms.cactos2PCMRepository;
import simulizar_qvto_helper.logHelper;


modeltype CACT_LCORE uses 'http://www.cactosfp7.eu/LogicalDCModel/Core/1.0';
modeltype CACT_LAPP uses 'http://www.cactosfp7.eu/LogicalDCModel/Application/1.0';
modeltype CACT_PCORE uses 'http://www.cactosfp7.eu/PhysicalDCModel/Core/1.0';
modeltype CACT_PUTIL uses 'http://www.cactosfp7.eu/PhysicalDCModel/Util/1.0';
modeltype CACT_PCORR uses 'http://www.cactosfp7.eu/Correspondence/Physical/1.1';
modeltype CACT_LCORR uses 'http://www.cactosfp7.eu/Correspondence/Logical/1.1';
modeltype CACT_LLOAD uses "http://www.cactosfp7.eu/CactosLoadModel/Logical/1.0";
modeltype PCM_COMP uses 'http://palladiosimulator.org/PalladioComponentModel/Core/Composition/5.1';
modeltype PCM_ALLOC uses 'http://palladiosimulator.org/PalladioComponentModel/Allocation/5.1';
modeltype PCM_STOEX uses 'http://sdq.ipd.uka.de/StochasticExpressions/2.2';
modeltype PCM_PARAM uses 'http://palladiosimulator.org/PalladioComponentModel/Parameter/5.1';
modeltype PCM_REP uses 'http://palladiosimulator.org/PalladioComponentModel/Repository/5.1';
modeltype PCM_SEFF uses 'http://palladiosimulator.org/PalladioComponentModel/SEFF/5.1';
modeltype PCM_SYS uses 'http://palladiosimulator.org/PalladioComponentModel/System/5.1';
modeltype PCM_RES_ENV uses 'http://palladiosimulator.org/PalladioComponentModel/ResourceEnvironment/5.1';
modeltype PCM_RES_TYPE uses 'http://palladiosimulator.org/PalladioComponentModel/ResourceType/5.1';
modeltype PCM_CORE uses 'http://palladiosimulator.org/PalladioComponentModel/Core/5.1';
modeltype PCM_USAGE uses 'http://palladiosimulator.org/PalladioComponentModel/UsageModel/5.1';
modeltype ACTION_MAPPING uses 'http://simulizar.palladiosimulator.org/Actions/Mapping/1.1';
modeltype ACTION_INSTANCE uses 'http://simulizar.palladiosimulator.org/Actions/Instance/1.1';
modeltype ACTION_CORE uses 'http://simulizar.palladiosimulator.org/Actions/Core/1.1';
modeltype ACTION_PARAM uses 'http://simulizar.palladiosimulator.org/Actions/Parameter/1.1';
modeltype ECORE uses 'http://www.eclipse.org/emf/2002/Ecore';
modeltype STOEX uses 'http://sdq.ipd.uka.de/StochasticExpressions/2.2';
modeltype PLM uses 'http://www.cactosfp7.eu/CactosLoadModel/Physical/1.0';
modeltype LLM uses 'http://www.cactosfp7.eu/CactosLoadModel/Logical/1.0';
modeltype OPTIMISATION_PLAN uses 'http://www.cactosfp7.eu/OptimisationPlan/1.0';
modeltype RUNTIMEMEASUREMENT uses 'http://simulizar.palladiosimulator.org/RuntimeMeasurement/1.0';
modeltype MONITOR_CORRESPONDENCE uses 'http://www.cactosfp7.eu/Correspondence/Measurement/1.1';
modeltype USAGEEVOLUTION uses "http://usageevolution/1.0";
modeltype USAGESEQUENCE uses "http://www.cactosfp7.eu/CactoSim/UsageSequence/1.1";
modeltype MONITORREPOSITORY uses "http://palladiosimulator.org/MonitorRepository/1.0";
modeltype MEASURINGPOINT uses "http://palladiosimulator.org/EDP2/MeasuringPoint/1.0";
modeltype PCMMEASURINGPOINT uses "http://palladiosimulator.org/PCM/MeasuringPoint/1.0";
modeltype METRICSPEC uses "http://palladiosimulator.org/MetricSpec/1.0";

transformation loadBalancerHandling(
							in metricspec : METRICSPEC,
							in logicaldc: CACT_LCORE,
							in physicaldc: CACT_PCORE,
							in runtimeMeasurement : RUNTIMEMEASUREMENT, 
							in resourcetypepcm : PCM_RES_TYPE,
							in primitiveresourcetyperepo : PCM_REP,
							inout measurementCorrespondence : MONITOR_CORRESPONDENCE,
							inout logicalCorrespondence: CACT_LCORR,
							inout physicalCorrespondence : CACT_PCORR,
							inout logicalload : CACT_LLOAD,
							inout pcmrepository : PCM_REP,
							out measuringpoint: PCMMEASURINGPOINT) {

	mapping inout ResourceDemandingSEFF::adaptLoadBalancer(newRoles: Set(OperationRequiredRole),
														   removedRoles: Set(OperationRequiredRole),
														   connector: ScalableVMImageConnector) {
		if (connector.loadBalancingPolicy = LoadBalancingPolicy::RoundRobin) {
			self.steps_Behaviour[BranchAction].map adaptRoundRobinLoadBalancer(newRoles, removedRoles);
		} else {
			self.steps_Behaviour[BranchAction].map adaptHashBasedLoadBalancer(newRoles, removedRoles);
		}
		
	}
	
	mapping inout BranchAction::adaptRoundRobinLoadBalancer(newRoles: Set(OperationRequiredRole),
															removedRoles: Set(OperationRequiredRole)) {
		var newAmountBranches := branches_Branch->size() + newRoles->size() - removedRoles->size();
		var branchesToRemove := branches_Branch[ProbabilisticBranchTransition]->
			select(removedRoles->includes(branchBehaviour_BranchTransition.steps_Behaviour[ExternalCallAction].role_ExternalService->any(true))); 															
		branches_Branch := branches_Branch - branchesToRemove;
		branches_Branch += newRoles->map toProbabilisticBranchTransition(
			self.resourceDemandingBehaviour_AbstractAction[ServiceEffectSpecification]
				.describedService__SEFF[OperationSignature]->any(true), 
			newAmountBranches);
		
		branches_Branch[ProbabilisticBranchTransition]->forEach(pbt) {
			pbt.branchProbability := 1.0 / newAmountBranches;
		};	
	}
	
	mapping inout BranchAction::adaptHashBasedLoadBalancer(newRoles: Set(OperationRequiredRole),
														   removedRoles: Set(OperationRequiredRole)) {
		var newAmountBranches := branches_Branch->size() + newRoles->size() - removedRoles->size();
		var branchesToRemove := branches_Branch[GuardedBranchTransition]->
			select(removedRoles->includes(branchBehaviour_BranchTransition.steps_Behaviour[ExternalCallAction].role_ExternalService->any(true))); 															
		branches_Branch := branches_Branch - branchesToRemove;
		branches_Branch += newRoles->map toGuardedBranchTransition(
			self.resourceDemandingBehaviour_AbstractAction[ServiceEffectSpecification]
				.describedService__SEFF[OperationSignature]->any(true), 
			newAmountBranches,
			1);
		
		var noBranch := 0;
		branches_Branch[GuardedBranchTransition]->forEach(gbt) {
			gbt.branchCondition_GuardedBranchTransition := createHashBasedBranchCondition("REQUEST_HASH.VALUE", newAmountBranches, noBranch);
			noBranch := noBranch + 1;
		};
	}
}