import m2m.qvt.oml.JScience;
import transforms.pcmHelperCore;
import transforms.localstorage;
import transforms.cactosAdaptationBehaviorHelper;
import transforms.cactos2PCMRepository;
import transforms.cactos2PCMSystem;
import transforms.cactos2PCMAllocation;
import transforms.cactos2PCMUsage;
import transforms.cactos2PCMUsageEvolution;
import simulizar_qvto_helper.logHelper;
import eu.cactosfp7.cactosim.placementconnector.PlacementConnectorUnit;
import transforms.updateRuntimeCorrespondence;
import cactosActionLibrary.connectApplication;
import cactosActionLibrary.createUnassignedVMs;
import cactosActionLibrary.placeVMs;
import cactosActionLibrary.startVM;
import cactosActionLibrary.userBehaviour;


modeltype CACT_LCORE uses 'http://www.cactosfp7.eu/LogicalDCModel/Core/1.0';
modeltype CACT_LAPP uses 'http://www.cactosfp7.eu/LogicalDCModel/Application/1.0';
modeltype CACT_PCORE uses 'http://www.cactosfp7.eu/PhysicalDCModel/Core/1.0';
modeltype CACT_PUTIL uses 'http://www.cactosfp7.eu/PhysicalDCModel/Util/1.0';
modeltype CACT_PCORR uses 'http://www.cactosfp7.eu/Correspondence/Physical/1.1';
modeltype CACT_LCORR uses 'http://www.cactosfp7.eu/Correspondence/Logical/1.1';
modeltype PCM_COMP uses 'http://palladiosimulator.org/PalladioComponentModel/Core/Composition/5.1';
modeltype PCM_ALLOC uses 'http://palladiosimulator.org/PalladioComponentModel/Allocation/5.1';
modeltype PCM_STOEX uses 'http://sdq.ipd.uka.de/StochasticExpressions/2.2';
modeltype PCM_PARAM uses 'http://palladiosimulator.org/PalladioComponentModel/Parameter/5.1';
modeltype PCM_REP uses 'http://palladiosimulator.org/PalladioComponentModel/Repository/5.1';
modeltype PCM_SEFF uses 'http://palladiosimulator.org/PalladioComponentModel/SEFF/5.1';
modeltype PCM_SYS uses 'http://palladiosimulator.org/PalladioComponentModel/System/5.1';
modeltype PCM_RES_ENV uses 'http://palladiosimulator.org/PalladioComponentModel/ResourceEnvironment/5.1';
modeltype PCM_RES_TYPE uses 'http://palladiosimulator.org/PalladioComponentModel/ResourceType/5.1';
modeltype PCM_CORE uses 'http://palladiosimulator.org/PalladioComponentModel/Core/5.1';
modeltype PCM_USAGE uses 'http://palladiosimulator.org/PalladioComponentModel/UsageModel/5.1';
modeltype ACTION_MAPPING uses 'http://simulizar.palladiosimulator.org/Actions/Mapping/1.1';
modeltype ACTION_INSTANCE uses 'http://simulizar.palladiosimulator.org/Actions/Instance/1.1';
modeltype ACTION_CORE uses 'http://simulizar.palladiosimulator.org/Actions/Core/1.1';
modeltype ACTION_PARAM uses 'http://simulizar.palladiosimulator.org/Actions/Parameter/1.1';
modeltype ACTION_CONTEXT uses 'http://simulizar.palladiosimulator.org/Actions/Context/1.1';
modeltype ECORE uses 'http://www.eclipse.org/emf/2002/Ecore';
modeltype STOEX uses 'http://sdq.ipd.uka.de/StochasticExpressions/2.2';
modeltype PLM uses 'http://www.cactosfp7.eu/CactosLoadModel/Physical/1.0';
modeltype LLM uses 'http://www.cactosfp7.eu/CactosLoadModel/Logical/1.0';
modeltype OPTIMISATION_PLAN uses 'http://www.cactosfp7.eu/OptimisationPlan/1.0';
modeltype RUNTIMEMEASUREMENT uses 'http://simulizar.palladiosimulator.org/RuntimeMeasurement/1.0';
modeltype MONITOR_CORRESPONDENCE uses 'http://www.cactosfp7.eu/Correspondence/Measurement/1.1';
modeltype USAGEEVOLUTION uses "http://usageevolution/1.0";
modeltype USAGESEQUENCE uses "http://www.cactosfp7.eu/CactoSim/UsageSequence/1.1";
modeltype MONITORREPOSITORY uses "http://palladiosimulator.org/MonitorRepository/1.0";
modeltype MEASURINGPOINT uses "http://palladiosimulator.org/EDP2/MeasuringPoint/1.0";
modeltype PCMMEASURINGPOINT uses "http://palladiosimulator.org/PCM/MeasuringPoint/1.0";
modeltype METRICSPEC uses "http://palladiosimulator.org/MetricSpec/1.0";
modeltype MONITOR_REPOSITORY uses "http://palladiosimulator.org/MonitorRepository/1.0";

transformation startApplication(in metricspec : METRICSPEC,
								in resourcetypepcm : PCM_RES_TYPE,
								in primitiveresourcetyperepo : PCM_REP,
								inout actionCore : ACTION_CORE,
								in actionContext : ACTION_CONTEXT,
								in physicaldc: CACT_PCORE,
								inout logicaldc: CACT_LCORE,
								inout actionRoleSet : ACTION_INSTANCE,
								inout lcorrespondence : CACT_LCORR,
								inout pcorrespondence : CACT_PCORR,
								inout pcmrepository : PCM_REP,
								inout pcmsystem : PCM_SYS,
								inout pcmallocation : PCM_ALLOC,
								inout pcmusage: PCM_USAGE,
								inout usageevolution: USAGEEVOLUTION,
								inout usagesequence: USAGESEQUENCE,
								inout monitorrepository :MONITOR_REPOSITORY,
								inout logicalload : LLM,
								inout pysicalload : PLM,
								inout measurementcorrespondence : MONITOR_CORRESPONDENCE,
								out measuringpoint: MEASURINGPOINT,
								out optimisationPlan: OPTIMISATION_PLAN) {
											
	main() {
		var physicalCorrespondenceRepository : PhysicalCorrespondenceRepository = pcorrespondence.rootObjects()[PhysicalCorrespondenceRepository]->any(true);
		var logicalCorrespondenceRepository : LogicalCorrespondenceRepository = lcorrespondence.rootObjects()[LogicalCorrespondenceRepository]->any(true);
		
		assert error (physicalCorrespondenceRepository != null) with log('Physical correspondence model must contain one Physical Correspondence Repository');
		assert error (logicalCorrespondenceRepository != null) with log('Logical correspondence model must contain one Logical Correspondence Repository');
		
		var roleSet := actionRoleSet.rootObjects()[RoleSet]->any(true);
		var loadBalancerVM := roleSet.roles->any(roleType.id=SO_LOAD_BALANCER_VM_ROLE_TYPE_ID).value.oclAsType(ComposedVM);
		var scalableConnector := roleSet.roles->any(roleType.id=SO_SCALABLE_CONNECTOR_ROLE_TYPE_ID).value.oclAsType(ScalableVMImageConnector);
		
		var applicationInstance := loadBalancerVM.applicationInstance.oclAsType(WhiteBoxApplicationInstance);
		var newVM: ComposedVM;
		applicationInstance.composedVMs += newVM := scalableConnector.map toUnassignedVM(applicationInstance);
		
		var placementSteps : SequentialSteps;
		var optimisationPlan := object OptimisationPlan @ optimisationPlan {
			optimisationStep := placementSteps := object SequentialSteps {};
		};
		newVM.map placeVM(placementSteps);
		newVM.map startVM(placementSteps);
		optimisationPlan.executeOptimisationPlan();
		
		logicalCorrespondenceRepository.correspondenceEstablished := false;
		
		var connectSteps: ParallelSteps;
		optimisationPlan := object OptimisationPlan @ optimisationPlan {
			optimisationStep := connectSteps := object ParallelSteps {};
		};
		newVM.map connectVM(connectSteps);
		optimisationPlan.executeOptimisationPlan();
	} 
	
	mapping ScalableVMImageConnector::toUnassignedVM(applicationInstance: WhiteBoxApplicationInstance): ComposedVM {
		init {
			var vmImage := self.serviceProvidedRole.interfaceProvidingEntity.oclAsType(ComposedVMImage);
			result := vmImage.createUnassignedVirtualMachine(vmImage.vmImageBehaviour.defaultFlavour, vmImage.determineNextInstanceNumber(applicationInstance, self));
		}
	}
	
	mapping ComposedVM::placeVM(inout steps : SequentialSteps) {
		steps.optimisationSteps += Sequence {self.virtualMachine}->determinePlacements();
	}
	
	mapping ComposedVM::startVM (inout steps : SequentialSteps) {
		steps.optimisationSteps += object StartVmAction {
			startedVm := self.virtualMachine
		};
	}
	
	mapping ComposedVM::connectVM(inout steps : ParallelSteps) {
		steps.optimisationSteps += self.map toConnectActions();
	}
	
	helper OptimisationPlan::executeOptimisationPlan() {
		var executionAction := selectExecuteOptimisationPlanAction();
		executionAction.execute(executionAction.createExecuteOptimisationStepRoleSet(self.optimisationStep), 
								actionContext.rootObjects()[ExecutionContext]->any(true));
	}
}