import transforms.pcmHelperCore;
import transforms.localstorage;
import transforms.cactosAdaptationBehaviorHelper;
import simulizar_qvto_helper.logHelper;
import eu.cactosfp7.cactosim.placementconnector.PlacementConnectorUnit;
import transforms.updateRuntimeCorrespondence;
import eu.cactosfp7.cactosim.action.repository.black.CactosActionBlackboxUnit;


modeltype CACT_LCORE uses 'http://www.cactosfp7.eu/LogicalDCModel/Core/1.0';
modeltype CACT_LAPP uses 'http://www.cactosfp7.eu/LogicalDCModel/Application/1.0';
modeltype CACT_PCORE uses 'http://www.cactosfp7.eu/PhysicalDCModel/Core/1.0';
modeltype CACT_PCORR uses 'http://www.cactosfp7.eu/Correspondence/Physical/1.1';
modeltype CACT_LCORR uses 'http://www.cactosfp7.eu/Correspondence/Logical/1.1';
modeltype PCM_COMP uses 'http://palladiosimulator.org/PalladioComponentModel/Core/Composition/5.1';
modeltype PCM_ALLOC uses 'http://palladiosimulator.org/PalladioComponentModel/Allocation/5.1';
modeltype PCM_STOEX uses 'http://sdq.ipd.uka.de/StochasticExpressions/2.2';
modeltype PCM_PARAM uses 'http://palladiosimulator.org/PalladioComponentModel/Parameter/5.1';
modeltype PCM_REP uses 'http://palladiosimulator.org/PalladioComponentModel/Repository/5.1';
modeltype PCM_SEFF uses 'http://palladiosimulator.org/PalladioComponentModel/SEFF/5.1';
modeltype PCM_SYS uses 'http://palladiosimulator.org/PalladioComponentModel/System/5.1';
modeltype PCM_RES_ENV uses 'http://palladiosimulator.org/PalladioComponentModel/ResourceEnvironment/5.1';
modeltype PCM_RES_TYPE uses 'http://palladiosimulator.org/PalladioComponentModel/ResourceType/5.1';
modeltype PCM_CORE uses 'http://palladiosimulator.org/PalladioComponentModel/Core/5.1';
modeltype ACTION_MAPPING uses 'http://simulizar.palladiosimulator.org/Actions/Mapping/1.1';
modeltype ACTION_INSTANCE uses 'http://simulizar.palladiosimulator.org/Actions/Instance/1.1';
modeltype ACTION_CORE uses 'http://simulizar.palladiosimulator.org/Actions/Core/1.1';
modeltype ACTION_PARAM uses 'http://simulizar.palladiosimulator.org/Actions/Parameter/1.1';
modeltype ACTION_CONTEXT uses 'http://simulizar.palladiosimulator.org/Actions/Context/1.1';
modeltype ECORE uses 'http://www.eclipse.org/emf/2002/Ecore';
modeltype STOEX uses 'http://sdq.ipd.uka.de/StochasticExpressions/2.2';
modeltype PLM uses 'http://www.cactosfp7.eu/CactosLoadModel/Physical/1.0';
modeltype LLM uses 'http://www.cactosfp7.eu/CactosLoadModel/Logical/1.0';
modeltype OPTIMISATION_PLAN uses 'http://www.cactosfp7.eu/OptimisationPlan/1.0';
modeltype RUNTIMEMEASUREMENT uses 'http://simulizar.palladiosimulator.org/RuntimeMeasurement/1.0';
modeltype MONITOR_CORRESPONDENCE uses 'http://www.cactosfp7.eu/Correspondence/Measurement/1.1';

transformation waitForOptimisationsToFinish(inout logicalCorrespondence: CACT_LCORR,
											inout physicalCorrespondence : CACT_PCORR,
											in actionRoleSet : ACTION_INSTANCE,
											in actionContext : ACTION_CONTEXT,
											inout actionCore : ACTION_CORE) {
										
	property APPLICATION_INSTANCE_TYPE_ID = "_pJmAhOxqEeW_CvI9eaHGOA";
	
	property OPTIMISATION_IN_PROGRESS_STEREOTYPE_NAME = "CactosEntityInOptimisation";

	
	
	main() {
		var roleSet := actionRoleSet.rootObjects()[RoleSet]->any(true);
		var applicationInstance := roleSet.roles->any(roleType.id=APPLICATION_INSTANCE_TYPE_ID).value.oclAsType(ApplicationInstance);
		
		assert fatal(applicationInstance.waitForPreviousOptimisation() and 
			applicationInstance.isSuitableForTermination());
	}
	
	query ApplicationInstance::isSuitableForTermination() : Boolean {
		logError("Tried to terminate unsupported Application Instance Type");
		assert fatal(false);
		return false;
	}
	
	query BlackBoxApplicationInstance::isSuitableForTermination() : Boolean {
		if (not (self.virtualMachine.state = VM_State::RUNNING)) {
			logError("The desired application cannot be terminated as it is in the state: " + self.virtualMachine.state.toString());
			return false;
		};
		return true;
	}
	
	query GreyBoxApplicationInstance::isSuitableForTermination() : Boolean {
		if (not (self.virtualMachine.state = VM_State::RUNNING)) {
			logError("The desired application cannot be terminated as it is in the state: " + self.virtualMachine.state.toString());
			return false;
		};
		return true;
	}
	
	query WhiteBoxApplicationInstance::isSuitableForTermination() : Boolean {
		var problemVM := self.composedVMs.virtualMachine->select(state <> VM_State::RUNNING);
		if (not problemVM->isEmpty()) {
			logError("The desired application cannot be terminated as it is in the state: " + problemVM->any(true).state.toString());
			return false;
		};
		return true;
	}
	
	query ApplicationInstance::waitForPreviousOptimisation() : Boolean {
		logError("Tried to terminate unsupported Application Instance Type");
		assert fatal(false);
		return false;
	}
	
	query BlackBoxApplicationInstance::waitForPreviousOptimisation() : Boolean {
		while (self.virtualMachine.hasAppliedStereotype(OPTIMISATION_IN_PROGRESS_STEREOTYPE_NAME)) {
			if (not actionContext.rootObjects()[ExecutionContext]->any(true).passivateWhileStereotypePresent(
				self.virtualMachine, OPTIMISATION_IN_PROGRESS_STEREOTYPE_NAME)) {
					return false;
			}
		};
		return true;
	}
	
	query GreyBoxApplicationInstance::waitForPreviousOptimisation() : Boolean {
		while (self.virtualMachine.hasAppliedStereotype(OPTIMISATION_IN_PROGRESS_STEREOTYPE_NAME)) {
			if (not actionContext.rootObjects()[ExecutionContext]->any(true).passivateWhileStereotypePresent(
				self.virtualMachine, OPTIMISATION_IN_PROGRESS_STEREOTYPE_NAME)) {
					return false;
			}
		};
		return true;
	}
	
	query WhiteBoxApplicationInstance::waitForPreviousOptimisation() : Boolean {
		var stereotypedVMs := self.composedVMs.virtualMachine->select(vm | vm.hasAppliedStereotype(OPTIMISATION_IN_PROGRESS_STEREOTYPE_NAME));
		while (not stereotypedVMs->isEmpty()) {
			if (not actionContext.rootObjects()[ExecutionContext]->any(true).passivateWhileStereotypePresent(
				stereotypedVMs->any(true), OPTIMISATION_IN_PROGRESS_STEREOTYPE_NAME)) {
					return false;
			};
			stereotypedVMs := self.composedVMs.virtualMachine->select(vm | vm.hasAppliedStereotype(OPTIMISATION_IN_PROGRESS_STEREOTYPE_NAME));
		};
		return true;
	}
	
	
	
							
}