/**
 */
package eu.cactosfp7.cactosim.experimentscenario.selector.provider;

import eu.cactosfp7.cactosim.experimentscenario.selector.util.SelectorAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class SelectorItemProviderAdapterFactory extends SelectorAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public SelectorItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link eu.cactosfp7.cactosim.experimentscenario.selector.PreviouslySuspendedApplicationSelector} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PreviouslySuspendedApplicationSelectorItemProvider previouslySuspendedApplicationSelectorItemProvider;

	/**
	 * This creates an adapter for a {@link eu.cactosfp7.cactosim.experimentscenario.selector.PreviouslySuspendedApplicationSelector}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPreviouslySuspendedApplicationSelectorAdapter() {
		if (previouslySuspendedApplicationSelectorItemProvider == null) {
			previouslySuspendedApplicationSelectorItemProvider = new PreviouslySuspendedApplicationSelectorItemProvider(this);
		}

		return previouslySuspendedApplicationSelectorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link eu.cactosfp7.cactosim.experimentscenario.selector.SuspendedInstanceSelector} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SuspendedInstanceSelectorItemProvider suspendedInstanceSelectorItemProvider;

	/**
	 * This creates an adapter for a {@link eu.cactosfp7.cactosim.experimentscenario.selector.SuspendedInstanceSelector}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSuspendedInstanceSelectorAdapter() {
		if (suspendedInstanceSelectorItemProvider == null) {
			suspendedInstanceSelectorItemProvider = new SuspendedInstanceSelectorItemProvider(this);
		}

		return suspendedInstanceSelectorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link eu.cactosfp7.cactosim.experimentscenario.selector.InitiallyRunningWhiteBoxApplicationInstanceSelector} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InitiallyRunningWhiteBoxApplicationInstanceSelectorItemProvider initiallyRunningWhiteBoxApplicationInstanceSelectorItemProvider;

	/**
	 * This creates an adapter for a {@link eu.cactosfp7.cactosim.experimentscenario.selector.InitiallyRunningWhiteBoxApplicationInstanceSelector}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInitiallyRunningWhiteBoxApplicationInstanceSelectorAdapter() {
		if (initiallyRunningWhiteBoxApplicationInstanceSelectorItemProvider == null) {
			initiallyRunningWhiteBoxApplicationInstanceSelectorItemProvider = new InitiallyRunningWhiteBoxApplicationInstanceSelectorItemProvider(this);
		}

		return initiallyRunningWhiteBoxApplicationInstanceSelectorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link eu.cactosfp7.cactosim.experimentscenario.selector.InitiallyRunningGreyBoxApplicationInstanceSelector} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InitiallyRunningGreyBoxApplicationInstanceSelectorItemProvider initiallyRunningGreyBoxApplicationInstanceSelectorItemProvider;

	/**
	 * This creates an adapter for a {@link eu.cactosfp7.cactosim.experimentscenario.selector.InitiallyRunningGreyBoxApplicationInstanceSelector}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInitiallyRunningGreyBoxApplicationInstanceSelectorAdapter() {
		if (initiallyRunningGreyBoxApplicationInstanceSelectorItemProvider == null) {
			initiallyRunningGreyBoxApplicationInstanceSelectorItemProvider = new InitiallyRunningGreyBoxApplicationInstanceSelectorItemProvider(this);
		}

		return initiallyRunningGreyBoxApplicationInstanceSelectorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link eu.cactosfp7.cactosim.experimentscenario.selector.InitiallyRunningBlackBoxApplicationInstanceSelector} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InitiallyRunningBlackBoxApplicationInstanceSelectorItemProvider initiallyRunningBlackBoxApplicationInstanceSelectorItemProvider;

	/**
	 * This creates an adapter for a {@link eu.cactosfp7.cactosim.experimentscenario.selector.InitiallyRunningBlackBoxApplicationInstanceSelector}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInitiallyRunningBlackBoxApplicationInstanceSelectorAdapter() {
		if (initiallyRunningBlackBoxApplicationInstanceSelectorItemProvider == null) {
			initiallyRunningBlackBoxApplicationInstanceSelectorItemProvider = new InitiallyRunningBlackBoxApplicationInstanceSelectorItemProvider(this);
		}

		return initiallyRunningBlackBoxApplicationInstanceSelectorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link eu.cactosfp7.cactosim.experimentscenario.selector.PreviouslyStartedWhiteBoxApplicationInstanceSelector} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PreviouslyStartedWhiteBoxApplicationInstanceSelectorItemProvider previouslyStartedWhiteBoxApplicationInstanceSelectorItemProvider;

	/**
	 * This creates an adapter for a {@link eu.cactosfp7.cactosim.experimentscenario.selector.PreviouslyStartedWhiteBoxApplicationInstanceSelector}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPreviouslyStartedWhiteBoxApplicationInstanceSelectorAdapter() {
		if (previouslyStartedWhiteBoxApplicationInstanceSelectorItemProvider == null) {
			previouslyStartedWhiteBoxApplicationInstanceSelectorItemProvider = new PreviouslyStartedWhiteBoxApplicationInstanceSelectorItemProvider(this);
		}

		return previouslyStartedWhiteBoxApplicationInstanceSelectorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link eu.cactosfp7.cactosim.experimentscenario.selector.PreviouslyStartedBlackBoxApplicationSelector} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PreviouslyStartedBlackBoxApplicationSelectorItemProvider previouslyStartedBlackBoxApplicationSelectorItemProvider;

	/**
	 * This creates an adapter for a {@link eu.cactosfp7.cactosim.experimentscenario.selector.PreviouslyStartedBlackBoxApplicationSelector}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPreviouslyStartedBlackBoxApplicationSelectorAdapter() {
		if (previouslyStartedBlackBoxApplicationSelectorItemProvider == null) {
			previouslyStartedBlackBoxApplicationSelectorItemProvider = new PreviouslyStartedBlackBoxApplicationSelectorItemProvider(this);
		}

		return previouslyStartedBlackBoxApplicationSelectorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link eu.cactosfp7.cactosim.experimentscenario.selector.PreviouslyStartedGreyBoxApplicationSelector} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PreviouslyStartedGreyBoxApplicationSelectorItemProvider previouslyStartedGreyBoxApplicationSelectorItemProvider;

	/**
	 * This creates an adapter for a {@link eu.cactosfp7.cactosim.experimentscenario.selector.PreviouslyStartedGreyBoxApplicationSelector}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPreviouslyStartedGreyBoxApplicationSelectorAdapter() {
		if (previouslyStartedGreyBoxApplicationSelectorItemProvider == null) {
			previouslyStartedGreyBoxApplicationSelectorItemProvider = new PreviouslyStartedGreyBoxApplicationSelectorItemProvider(this);
		}

		return previouslyStartedGreyBoxApplicationSelectorItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void dispose() {
		if (previouslySuspendedApplicationSelectorItemProvider != null) previouslySuspendedApplicationSelectorItemProvider.dispose();
		if (suspendedInstanceSelectorItemProvider != null) suspendedInstanceSelectorItemProvider.dispose();
		if (initiallyRunningWhiteBoxApplicationInstanceSelectorItemProvider != null) initiallyRunningWhiteBoxApplicationInstanceSelectorItemProvider.dispose();
		if (initiallyRunningGreyBoxApplicationInstanceSelectorItemProvider != null) initiallyRunningGreyBoxApplicationInstanceSelectorItemProvider.dispose();
		if (initiallyRunningBlackBoxApplicationInstanceSelectorItemProvider != null) initiallyRunningBlackBoxApplicationInstanceSelectorItemProvider.dispose();
		if (previouslyStartedWhiteBoxApplicationInstanceSelectorItemProvider != null) previouslyStartedWhiteBoxApplicationInstanceSelectorItemProvider.dispose();
		if (previouslyStartedBlackBoxApplicationSelectorItemProvider != null) previouslyStartedBlackBoxApplicationSelectorItemProvider.dispose();
		if (previouslyStartedGreyBoxApplicationSelectorItemProvider != null) previouslyStartedGreyBoxApplicationSelectorItemProvider.dispose();
	}

}
