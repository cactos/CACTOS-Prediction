import cactos2PCMShared;
import cactos2PCMUsage;
import logicalDCModelHelper;
import pcmHelper;
import eu.cactosfp7.infrastructuremodels.util.blackboxunit.InfrastructureModelUtilsBlackBoxUnit;


modeltype _pcm_usagemodel uses "http://palladiosimulator.org/PalladioComponentModel/UsageModel/5.1";
modeltype _pcmseff uses 'http://palladiosimulator.org/PalladioComponentModel/SEFF/5.1';
modeltype _pcmseffperformance uses 'http://palladiosimulator.org/PalladioComponentModel/SEFF/SEFF_Performance/5.1';
modeltype _physicaldc uses "http://www.cactosfp7.eu/PhysicalDCModel/Core/1.0";
modeltype _physicaldc_architecturetype uses "http://www.cactosfp7.eu/PhysicalDCModel/ArchitectureType/1.0";
modeltype _logicaldc uses "http://www.cactosfp7.eu/LogicalDCModel/Core/1.0";
modeltype _logicaldc_application uses "http://www.cactosfp7.eu/LogicalDCModel/Application/1.0";
modeltype _lcorrespondence uses 'http://www.cactosfp7.eu/Correspondence/Logical/1.1';
modeltype _pcorrespondence uses 'http://www.cactosfp7.eu/Correspondence/Physical/1.1';
modeltype _mcorrespondence uses 'http://www.cactosfp7.eu/Correspondence/Measurement/1.1';
modeltype _pcmcore uses "http://palladiosimulator.org/PalladioComponentModel/Core/5.1";
modeltype _pcmrepository uses "http://palladiosimulator.org/PalladioComponentModel/Repository/5.1";
modeltype _pcmresourcetype uses 'http://palladiosimulator.org/PalladioComponentModel/ResourceType/5.1';
modeltype _pcmsystem uses 'http://palladiosimulator.org/PalladioComponentModel/System/5.1';
modeltype _pcmcomposition uses 'http://palladiosimulator.org/PalladioComponentModel/Core/Composition/5.1';
modeltype _pcm_seff uses 'http://palladiosimulator.org/PalladioComponentModel/SEFF/5.1';
modeltype _pcm_seff_performance uses 'http://palladiosimulator.org/PalladioComponentModel/SEFF/SEFF_Performance/5.1';
modeltype _pcm_parameter uses 'http://palladiosimulator.org/PalladioComponentModel/Parameter/5.1';
modeltype _pcmusage uses 'http://palladiosimulator.org/PalladioComponentModel/UsageModel/5.1';
modeltype _pcmallocation uses 'http://palladiosimulator.org/PalladioComponentModel/Allocation/5.1';
modeltype _pcmresourceenvironment uses "http://palladiosimulator.org/PalladioComponentModel/ResourceEnvironment/5.1";
modeltype _pcm_stoex uses "http://sdq.ipd.uka.de/StochasticExpressions/2.2";
modeltype _monitorrepository uses "http://palladiosimulator.org/MonitorRepository/1.0";
modeltype _measuringpoint uses "http://palladiosimulator.org/PCM/MeasuringPoint/1.0";
modeltype _metricspec uses "http://palladiosimulator.org/MetricSpec/1.0";
modeltype _usageevolution uses "http://usageevolution/1.0";
modeltype _loadmodel_logical uses "http://www.cactosfp7.eu/CactosLoadModel/Logical/1.0";
modeltype _loadmodel_physical uses "http://www.cactosfp7.eu/CactosLoadModel/Physical/1.0";
modeltype _usagesequencerepository uses "http://www.cactosfp7.eu/CactoSim/UsageSequence/1.1";
modeltype _cactospowermodel uses 'http://www.cactosfp7.eu/PhysicalDCModel/Power/1.0';
modeltype _cactospowerbinding uses 'http://www.cactosfp7.eu/PhysicalDCModel/Power/Binding/1.0';
modeltype _cactospowerinfrastructure uses 'http://www.cactosfp7.eu/PhysicalDCModel/Power/Specification/1.0'; 
modeltype _cactospowerspecification uses 'http://www.cactosfp7.eu/PhysicalDCModel/Power/Specification/1.0';
modeltype _powerutil uses 'http://www.fzi.de/Power/Util/1.0';
modeltype _powerbinding uses 'http://www.fzi.de/Power/Binding/1.0';
modeltype _powerspecification uses 'http://www.fzi.de/Power/Specification/1.0';
modeltype _powerinfrastructure uses 'http://www.fzi.de/Power/Infrastructure/1.0';
modeltype _dlim uses "http://descartes.tools/dlim/0.1";
modeltype _measuringpointEDP2 uses "http://palladiosimulator.org/EDP2/MeasuringPoint/1.0";
modeltype _resourceenvironment uses "http://palladiosimulator.org/PalladioComponentModel/ResourceEnvironment/5.1";
modeltype _monitor_correspondence uses 'http://www.cactosfp7.eu/Correspondence/Measurement/1.1';
modeltype _ecore uses 'http://www.eclipse.org/emf/2002/Ecore';


transformation cactos2PCMUsageEvolution(in metricspec : _metricspec,
										in resourcetypepcm : _pcmresourcetype,
										in primitiveresourcetyperepo : _pcmrepository,
										inout lcorrespondence : _lcorrespondence,
										inout pcorrespondence : _pcorrespondence,
										inout pcmrepository : _pcmrepository,
										inout pcmsystem : _pcmsystem,
										inout pcmallocation : _pcmallocation,
										inout pcmusage: _pcmusage,
										inout usageevolution: _usageevolution,
										inout usagesequence: _usagesequencerepository,
										inout measuringpoint: _measuringpoint,
										inout monitorrepository :_monitorrepository,
										inout logicalload : _loadmodel_logical,
										inout measurementcorrespondence : _monitor_correspondence) {
	
	mapping LogicalDCModel::logicalDCModelToUsageEvolution(inout lc : LogicalCorrespondenceRepository) : UsageEvolution @ usageevolution {
		entityName := "Usage evolution for black-box application behaviour models.";
		usages += self.applicationInstances.map toUsage();
	}

	mapping ApplicationInstance::toUsage(): Set(Usage) {
		assert fatal (false) with log ("LogicalDCModel containes unsupported ApplicationInstance. No Usage Evolution could be created.")
	}	
								
	mapping BlackBoxApplicationInstance::toUsage() : Set(Usage) {
		init {
			var usage := self.virtualMachine.runtimeApplicationModel.map toUsage();
			usage.scenario := self.resolveoneIn(BlackBoxApplicationInstance::toUsageScenario);
			var vmCorr := lcorrespondence.rootObjects()[LogicalCorrespondenceRepository].virtualMachineCorrespondences
				->any(cactos = self.virtualMachine).palladioUsage := usage;
			result := Set { usage };
		}
	}
	
	mapping GreyBoxApplicationInstance::toUsage() : Set(Usage) {
		init {
			// No Usage Evolution required for Grey Box Applications
			result := Set{};
		}
	}
	
	mapping WhiteBoxApplicationInstance::toUsage() : Set(Usage) {
		init {
			result := self.whiteBoxUserBehaviourInstance.map toUsage()->asSet();
		}
	}
	
	mapping application::UsageScenario::toUsage(): Set(Usage) {
		init {
			result := self.userBehaviours->select(arrivalRate.oclIsTypeOf(VariableOpenWorkload))->map toUsage()->asSet();
		}
	}
	
	mapping UserBehaviour::toUsage() : Usage {
		entityName := "Evolution for UserBehaviour #" + self.id;
		scenario := self.resolveoneIn(UserBehaviour::toUsageScenario); 
		
		self.arrivalRate.map toUsageSequence(result);
		
		lcorrespondence.rootObjects()[LogicalCorrespondenceRepository]->any(true).userBehaviourCorrespondences
			+= object UserBehaviourCorrespondence {
				cactosUserBehaviour := self;
				palladioUsage := result;
			};
	}
	
	mapping ArrivalRate::toUsageSequence(inout usage: Usage) {
		
	}
	
	mapping VariableOpenWorkload::toUsageSequence(inout usage: Usage) {
		usage.evolutionStepWidth := getAmountInMultiplesOfReferenceAmount(self.samplingInterval, SIMULATION_STEP_DURATION_AMOUNT);
		var loadEvolutionResult : _'Sequence';
		getOrCreateUsageSequenceRepository().sequences += loadEvolutionResult := 
			self.arrivalRate.oclAsType(EObject).nonIdDeepClone().oclAsType(_'Sequence');
		loadEvolutionResult.name := "ArrivalRate Evolution Sequence of UserBehaviour #" + self.userBehaviour.id.toString();	
		usage.loadEvolution := loadEvolutionResult;
		usage.repeatingPattern := true;
	}
	
	mapping VMBehaviour::toUsage() : Usage {
		assert fatal (false) with log ("Virtual Machine containes unsupported VMBehaviour. No Usage Evolution could be created.")	
	}
	
	mapping BlackBoxVMBehaviour::toUsage() : Usage {
		entityName := "Evolution for VM #" + self.virtualMachine.id;
		repeatingPattern := self.patternIsRepeating;
		workEvolutions += self.blackBoxWorkloads.map blackBoxWorkloadToWorkParameterEvolution();
		var loadEvolutionResult := workEvolutions->map extractUsageSequence();
		getOrCreateUsageSequenceRepository().sequences += loadEvolutionResult;
		loadEvolution := loadEvolutionResult;
		evolutionStepWidth := getAmountInMultiplesOfReferenceAmount(BLACK_BOX_USAGE_EVOLUTION_UPDATE_INTERVAL, SIMULATION_STEP_DURATION_AMOUNT);
		lcorrespondence.rootObjects()[LogicalCorrespondenceRepository]
			.virtualMachineCorrespondences->any(cactos.id = self.virtualMachine.id).palladioUsage := result;
	}
	
	mapping BlackBoxWorkload::blackBoxWorkloadToWorkParameterEvolution() : WorkParameterEvolution {
		evolution := self.resourceDemandRates;
		variableCharacterisation := self.resolveone(VariableUsage).variableCharacterisation_VariableUsage->any(true);
	}
	
	mapping Set(WorkParameterEvolution)::extractUsageSequence() : _'Sequence' {
		var terminationTimes : Bag(Real) := self.evolution->terminateAfterTime;
		var maximumLength : Real := terminationTimes->iterate(elem : Real; curMax : Real = terminationTimes->any(true) | curMax.max(elem));
		name := self->any(true).container().oclAsType(Usage).entityName;
		terminateAfterTime := maximumLength;
		firstIterationStart := 0;
		firstIterationEnd := maximumLength;
		loopDuration := maximumLength;
		finalDuration := maximumLength;
		terminateAfterLoops := -1;
		sequenceFunctionContainers += object TimeDependentFunctionContainer {
			function := object Constant {
				constant := 1/getAmountInMultiplesOfReferenceAmount(BLACK_BOX_APPLICATION_WORKLOAD_UPDATE_INTERVAL, SIMULATION_STEP_DURATION_AMOUNT);
			};
			duration := maximumLength;
		};
	}
	
}