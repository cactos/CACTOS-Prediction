import m2m.qvt.oml.JScience;
import physicaldcmodel2resourceenvironment;
import pcmHelper;
import logicalDCModelHelper;
import localstorage;
import cactos2PCMRepository;
import cactos2PCMSystem;
import cactos2PCMAllocation;
import cactos2PCMUsage;
import cactos2PCMUsageEvolution;

modeltype _physicaldc uses "http://www.cactosfp7.eu/PhysicalDCModel/Core/1.0";
modeltype _physicaldc_architecturetype uses "http://www.cactosfp7.eu/PhysicalDCModel/ArchitectureType/1.0";
modeltype _logicaldc uses "http://www.cactosfp7.eu/LogicalDCModel/Core/1.0";
modeltype _logicaldc_application uses "http://www.cactosfp7.eu/LogicalDCModel/Application/1.0";
modeltype _lcorrespondence uses 'http://www.cactosfp7.eu/Correspondence/Logical/1.1';
modeltype _pcorrespondence uses 'http://www.cactosfp7.eu/Correspondence/Physical/1.1';
modeltype _mcorrespondence uses 'http://www.cactosfp7.eu/Correspondence/Measurement/1.1';
modeltype _pcmcore uses "http://palladiosimulator.org/PalladioComponentModel/Core/5.1";
modeltype _pcmrepository uses "http://palladiosimulator.org/PalladioComponentModel/Repository/5.1";
modeltype _pcmresourcetype uses 'http://palladiosimulator.org/PalladioComponentModel/ResourceType/5.1';
modeltype _pcmsystem uses 'http://palladiosimulator.org/PalladioComponentModel/System/5.1';
modeltype _pcmcomposition uses 'http://palladiosimulator.org/PalladioComponentModel/Core/Composition/5.1';
modeltype _pcm_seff uses 'http://palladiosimulator.org/PalladioComponentModel/SEFF/5.1';
modeltype _pcm_seff_performance uses 'http://palladiosimulator.org/PalladioComponentModel/SEFF/SEFF_Performance/5.1';
modeltype _pcm_parameter uses 'http://palladiosimulator.org/PalladioComponentModel/Parameter/5.1';
modeltype _pcmusage uses 'http://palladiosimulator.org/PalladioComponentModel/UsageModel/5.1';
modeltype _pcmallocation uses 'http://palladiosimulator.org/PalladioComponentModel/Allocation/5.1';
modeltype _pcmresourceenvironment uses "http://palladiosimulator.org/PalladioComponentModel/ResourceEnvironment/5.1";
modeltype _pcm_stoex uses "http://sdq.ipd.uka.de/StochasticExpressions/2.2";
modeltype _monitorrepository uses "http://palladiosimulator.org/MonitorRepository/1.0";
modeltype _measuringpoint uses "http://palladiosimulator.org/PCM/MeasuringPoint/1.0";
modeltype _metricspec uses "http://palladiosimulator.org/MetricSpec/1.0";
modeltype _usageevolution uses "http://usageevolution/1.0";
modeltype _loadmodel_logical uses "http://www.cactosfp7.eu/CactosLoadModel/Logical/1.0";
modeltype _loadmodel_physical uses "http://www.cactosfp7.eu/CactosLoadModel/Physical/1.0";
modeltype _usagesequencerepository uses "http://www.cactosfp7.eu/CactoSim/UsageSequence/1.1";
modeltype _cactospowermodel uses 'http://www.cactosfp7.eu/PhysicalDCModel/Power/1.0';
modeltype _cactospowerbinding uses 'http://www.cactosfp7.eu/PhysicalDCModel/Power/Binding/1.0';
modeltype _cactospowerinfrastructure uses 'http://www.cactosfp7.eu/PhysicalDCModel/Power/Specification/1.0'; 
modeltype _cactospowerspecification uses 'http://www.cactosfp7.eu/PhysicalDCModel/Power/Specification/1.0';
modeltype _powerutil uses 'http://www.fzi.de/Power/Util/1.0';
modeltype _powerbinding uses 'http://www.fzi.de/Power/Binding/1.0';
modeltype _powerspecification uses 'http://www.fzi.de/Power/Specification/1.0';
modeltype _powerinfrastructure uses 'http://www.fzi.de/Power/Infrastructure/1.0';
modeltype _dlim uses "http://descartes.tools/dlim/0.1";
modeltype _measuringpointEDP2 uses "http://palladiosimulator.org/EDP2/MeasuringPoint/1.0";
modeltype _experimentscenario uses 'http://www.cactosfp7.eu/ExperimentScenarioModel/1.0';

transformation infrastructuremodels2pcm(
		// Physical Data Centre Model 
		in physicaldc : _physicaldc,
		in resourcetypepcm : _pcmresourcetype,
		out resourcetyperepository : _pcmresourcetype,
		out resourceenvironment : _pcmresourceenvironment,
		in metricspec : _metricspec,
		in architecturetype : _physicaldc_architecturetype,
		out physicalload : _loadmodel_physical,
		out pcorrespondence : _pcorrespondence,
		// Logical Data Centre Model
		in logicaldc : _logicaldc,
		out repository : _pcmrepository,
		out pcmsystem : _pcmsystem,
		out pcmusage : _pcmusage,
		out pcmallocation : _pcmallocation,
		out logicalload : _loadmodel_logical,
		out lcorrespondence : _lcorrespondence,
		out usageevolution : _usageevolution,
		in primitivetypesrepo : _pcmrepository,
		out usagesequencerepository : _usagesequencerepository,
		// Deferred Physical Data Centre Model
		out measuringpoint: _measuringpoint,
		out monitorrepository :_monitorrepository,
		in cactospowerbinding : _cactospowerbinding,
		in cactospowerspecification : _cactospowerspecification,
		out powerspecification : _powerspecification,
		out powerbinding : _powerbinding,
		out powerinfrastructure : _powerinfrastructure,
		out mcorrespondence : _mcorrespondence,
		in experimentscenario: _experimentscenario)
		extends transformation physicaldcmodel2resourceenvironment(
		in _physicaldc,
		in _pcmresourcetype,
		out _monitorrepository,
		out _pcmresourcetype,
		out _pcmresourceenvironment,
		out _measuringpoint,
		in _metricspec,
		in _physicaldc_architecturetype,
		out _loadmodel_physical,
		out _pcorrespondence,
		in _cactospowerbinding,
		in _cactospowerspecification,
		out _powerspecification,
		out _powerbinding,
		out _powerinfrastructure,
		out _mcorrespondence)/*,
		localstorage(
		inout _pcorrespondence,
		inout _lcorrespondence)*/;



main() {
	log("Executing transformation from CACTOS Infrastructure Models to Palladio Models.");
	
	//Initialize update interval properties based on configured simulation granularity
	var simRes := experimentscenario.rootObjects()[ExperimentScenarioTimeLine].simulationResolution->any(true);
	if (simRes <> null and not simRes.oclIsInvalid() and not simRes.oclIsUndefined()) {
		BLACK_BOX_APPLICATION_WORKLOAD_UPDATE_INTERVAL := BLACK_BOX_USAGE_EVOLUTION_UPDATE_INTERVAL := simRes;	
	}; 
	
	new physicaldcmodel2resourceenvironment(physicaldc, resourcetypepcm, monitorrepository, 
			resourcetyperepository, resourceenvironment, measuringpoint, metricspec, architecturetype, physicalload, 
			pcorrespondence, cactospowerbinding, cactospowerspecification,
			powerspecification, powerbinding, powerinfrastructure, mcorrespondence)->transform();
	var physicalDCModel := physicaldc.rootObjects()[PhysicalDCModel]->any(true);	
	// Correspondence
	/* Note that the following elements are not mapped to Palladio and there is no correspondence needed as of now:
		VMImageCorrespondence, VMImageInstanceCorrespondence, VirtualNetworkInterconnectCorrespondence. 
	*/
	var lload := object LogicalLoadModel @ logicalload {};
	var lc := object LogicalCorrespondenceRepository @ lcorrespondence {
		_logicalLoadModel := lload;
	};
	var pc := pcorrespondence.rootObjects()[PhysicalCorrespondenceRepository]->any(true);
	var measuringPointRepo := measuringpoint.rootObjects()[MeasuringPointRepository]->any(true);
	
	var monitorRepository := monitorrepository.rootObjects()[MonitorRepository]->any(true);
	monitorRepository.monitors += logicaldc.rootObjects()[LogicalDCModel].map createOptimisationIntervallMonitor();
	
	// TODO : Add VirtualMemoryMeasurement template once this aspect is included in optimization and simulation.
	// TODO : Add VirtualNetworkInterconnect template once this aspect is included in optimization and simulation.
	// TODO : Add VirtualProcessingUnit template once this aspect is included in optimization and simulation.
	// TODO : Add VolumeMeasurement template once this aspect is included in optimization and simulation.

	log("Transforming Logical Data Centre Model.");
	
	//Make sure the repository is created even if there is no need based on the initial model
	//so that runtime transformations can expect it to exist
	getOrCreateUsageSequenceRepository();
	
	logicaldc.rootObjects()[LogicalDCModel].map logicalDCModelToRepository(pc);
	logicaldc.rootObjects()[LogicalDCModel].map logicalDCModelToSystem();
	logicaldc.rootObjects()[LogicalDCModel].map logicalDCModelToAllocation(lc, pc, physicalDCModel);
	logicaldc.rootObjects()[LogicalDCModel].map logicalDCModelToUsageModel();
	
	var repo : Repository := logicaldc.rootObjects()[LogicalDCModel].resolveoneIn(LogicalDCModel::logicalDCModelToRepository, Repository);
	
	var hypervisors : Bag(Hypervisor) := logicaldc.rootObjects()[LogicalDCModel].hypervisors;
	var networkAttachedStorages : Bag(NetworkAttachedStorage) := physicaldc.rootObjects()[PhysicalDCModel].racks.nodes->selectByType(NetworkAttachedStorage);
	
	var storageInterface := repo.map getOrCreateStorageAccessInterface();
	repo.components__Repository += hypervisors.map createStorageResources(lc, pc, storageInterface);
	repo.components__Repository += networkAttachedStorages.map createStorageResources(lc, pc, storageInterface);
	
	var system : System := pcmsystem.rootObjects()[System]->any(true);
	var allocation : Allocation := pcmallocation.rootObjects()[Allocation]->any(true);
	system.assemblyContexts__ComposedStructure += hypervisors.map createStorageAssembly();
	system.assemblyContexts__ComposedStructure += networkAttachedStorages.map createStorageAssembly();
	allocation.allocationContexts_Allocation += hypervisors.map deployStorageAssemblies(lc); //TODO resolveone in here does not work since change of createStorageAssembly
	allocation.allocationContexts_Allocation += networkAttachedStorages.map deployStorageAssemblies(lc);
	hypervisors.map linkStorageAssemblyWithStorageAssemblies(lc, system, storageInterface);
	
	lc.map linkVmsToLocalStorageAccess(system);
	logicaldc.rootObjects()[LogicalDCModel].map logicalDCModelToUsageEvolution(lc);
	measuringPointRepo.measuringPoints += logicaldc.rootObjects()[LogicalDCModel].applicationInstances->map toMeasuringPoints()->flatten();
	monitorRepository.monitors += logicaldc.rootObjects()[LogicalDCModel].applicationInstances->map toMonitors()->flatten();
			
	log("Transformation of Logical Data Centre Model finished.");

	log("Finished transformation from CACTOS Infrastructure Models to Palladio Models.");
}

mapping LogicalDCModel::logicalDCModelToRepository(in pc: PhysicalCorrespondenceRepository) : Repository @ repository {
	entityName := "CactoSim Simulation Repository";
	repositoryDescription := "Repository create by the CactoSim transformation from CACTOS Infrastructure Models to Palladio Models.";
	log("logicalDCModelToRepository", self.applicationInstances);
	interfaces__Repository += self.applicationInstances->map toOperationInterfaces(result)->flatten();
	
	components__Repository += self.applicationInstances->map toBasicComponents(result)->flatten();
	
	// TODO : Implement virtual networks 
	// Hypervisor does not need to be mapped; Could be mapped to a nested resource container with overhead once forwarding is complete. 
	// VM Image does not need to be mapped
	// Volume is currently not mapped. TODO Concept for assignment must be made
}	

mapping LogicalDCModel::createOptimisationIntervallMonitor(): Monitor {
	entityName := "Monitor Cyclic Optimisation Timer";
	measuringPoint := measuringpoint.rootObjects()[MeasuringPointRepository].measuringPoints[ResourceEnvironmentMeasuringPoint]->any(true);
	measurementSpecifications += object MeasurementSpecification {
		processingType := object TimeDriven {
			windowIncrement := getAmountValueInStandardUnitAsDouble(self.cyclicOptimizationInterval);
			windowLength := getAmountValueInStandardUnitAsDouble(self.cyclicOptimizationInterval);
		};
		metricDescription := getMetricDescriptionPointInTime();
	};
}
