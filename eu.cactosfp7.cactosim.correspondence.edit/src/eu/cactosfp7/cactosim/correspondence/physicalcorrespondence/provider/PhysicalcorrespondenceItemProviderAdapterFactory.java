/**
 */
package eu.cactosfp7.cactosim.correspondence.physicalcorrespondence.provider;

import eu.cactosfp7.cactosim.correspondence.physicalcorrespondence.util.PhysicalcorrespondenceAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class PhysicalcorrespondenceItemProviderAdapterFactory extends PhysicalcorrespondenceAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public PhysicalcorrespondenceItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link eu.cactosfp7.cactosim.correspondence.physicalcorrespondence.PuMeasurementCorrespondence} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PuMeasurementCorrespondenceItemProvider puMeasurementCorrespondenceItemProvider;

	/**
	 * This creates an adapter for a {@link eu.cactosfp7.cactosim.correspondence.physicalcorrespondence.PuMeasurementCorrespondence}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPuMeasurementCorrespondenceAdapter() {
		if (puMeasurementCorrespondenceItemProvider == null) {
			puMeasurementCorrespondenceItemProvider = new PuMeasurementCorrespondenceItemProvider(this);
		}

		return puMeasurementCorrespondenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link eu.cactosfp7.cactosim.correspondence.physicalcorrespondence.MemoryMeasurementCorrespondence} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MemoryMeasurementCorrespondenceItemProvider memoryMeasurementCorrespondenceItemProvider;

	/**
	 * This creates an adapter for a {@link eu.cactosfp7.cactosim.correspondence.physicalcorrespondence.MemoryMeasurementCorrespondence}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMemoryMeasurementCorrespondenceAdapter() {
		if (memoryMeasurementCorrespondenceItemProvider == null) {
			memoryMeasurementCorrespondenceItemProvider = new MemoryMeasurementCorrespondenceItemProvider(this);
		}

		return memoryMeasurementCorrespondenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link eu.cactosfp7.cactosim.correspondence.physicalcorrespondence.StorageMeasurementCorrespondence} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StorageMeasurementCorrespondenceItemProvider storageMeasurementCorrespondenceItemProvider;

	/**
	 * This creates an adapter for a {@link eu.cactosfp7.cactosim.correspondence.physicalcorrespondence.StorageMeasurementCorrespondence}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStorageMeasurementCorrespondenceAdapter() {
		if (storageMeasurementCorrespondenceItemProvider == null) {
			storageMeasurementCorrespondenceItemProvider = new StorageMeasurementCorrespondenceItemProvider(this);
		}

		return storageMeasurementCorrespondenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link eu.cactosfp7.cactosim.correspondence.physicalcorrespondence.InterconnectMeasurementCorrespondence} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InterconnectMeasurementCorrespondenceItemProvider interconnectMeasurementCorrespondenceItemProvider;

	/**
	 * This creates an adapter for a {@link eu.cactosfp7.cactosim.correspondence.physicalcorrespondence.InterconnectMeasurementCorrespondence}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInterconnectMeasurementCorrespondenceAdapter() {
		if (interconnectMeasurementCorrespondenceItemProvider == null) {
			interconnectMeasurementCorrespondenceItemProvider = new InterconnectMeasurementCorrespondenceItemProvider(this);
		}

		return interconnectMeasurementCorrespondenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link eu.cactosfp7.cactosim.correspondence.physicalcorrespondence.PhysicalCorrespondenceRepository} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PhysicalCorrespondenceRepositoryItemProvider physicalCorrespondenceRepositoryItemProvider;

	/**
	 * This creates an adapter for a {@link eu.cactosfp7.cactosim.correspondence.physicalcorrespondence.PhysicalCorrespondenceRepository}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPhysicalCorrespondenceRepositoryAdapter() {
		if (physicalCorrespondenceRepositoryItemProvider == null) {
			physicalCorrespondenceRepositoryItemProvider = new PhysicalCorrespondenceRepositoryItemProvider(this);
		}

		return physicalCorrespondenceRepositoryItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link eu.cactosfp7.cactosim.correspondence.physicalcorrespondence.SwitchCorrespondence} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SwitchCorrespondenceItemProvider switchCorrespondenceItemProvider;

	/**
	 * This creates an adapter for a {@link eu.cactosfp7.cactosim.correspondence.physicalcorrespondence.SwitchCorrespondence}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSwitchCorrespondenceAdapter() {
		if (switchCorrespondenceItemProvider == null) {
			switchCorrespondenceItemProvider = new SwitchCorrespondenceItemProvider(this);
		}

		return switchCorrespondenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link eu.cactosfp7.cactosim.correspondence.physicalcorrespondence.RackCorrespondence} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RackCorrespondenceItemProvider rackCorrespondenceItemProvider;

	/**
	 * This creates an adapter for a {@link eu.cactosfp7.cactosim.correspondence.physicalcorrespondence.RackCorrespondence}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRackCorrespondenceAdapter() {
		if (rackCorrespondenceItemProvider == null) {
			rackCorrespondenceItemProvider = new RackCorrespondenceItemProvider(this);
		}

		return rackCorrespondenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link eu.cactosfp7.cactosim.correspondence.physicalcorrespondence.AbstractNodeCorrespondence} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AbstractNodeCorrespondenceItemProvider abstractNodeCorrespondenceItemProvider;

	/**
	 * This creates an adapter for a {@link eu.cactosfp7.cactosim.correspondence.physicalcorrespondence.AbstractNodeCorrespondence}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAbstractNodeCorrespondenceAdapter() {
		if (abstractNodeCorrespondenceItemProvider == null) {
			abstractNodeCorrespondenceItemProvider = new AbstractNodeCorrespondenceItemProvider(this);
		}

		return abstractNodeCorrespondenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link eu.cactosfp7.cactosim.correspondence.physicalcorrespondence.MemorySpecificationCorrespondence} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MemorySpecificationCorrespondenceItemProvider memorySpecificationCorrespondenceItemProvider;

	/**
	 * This creates an adapter for a {@link eu.cactosfp7.cactosim.correspondence.physicalcorrespondence.MemorySpecificationCorrespondence}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMemorySpecificationCorrespondenceAdapter() {
		if (memorySpecificationCorrespondenceItemProvider == null) {
			memorySpecificationCorrespondenceItemProvider = new MemorySpecificationCorrespondenceItemProvider(this);
		}

		return memorySpecificationCorrespondenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link eu.cactosfp7.cactosim.correspondence.physicalcorrespondence.StorageSpecificationCorrespondence} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StorageSpecificationCorrespondenceItemProvider storageSpecificationCorrespondenceItemProvider;

	/**
	 * This creates an adapter for a {@link eu.cactosfp7.cactosim.correspondence.physicalcorrespondence.StorageSpecificationCorrespondence}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStorageSpecificationCorrespondenceAdapter() {
		if (storageSpecificationCorrespondenceItemProvider == null) {
			storageSpecificationCorrespondenceItemProvider = new StorageSpecificationCorrespondenceItemProvider(this);
		}

		return storageSpecificationCorrespondenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link eu.cactosfp7.cactosim.correspondence.physicalcorrespondence.NetworkInterconnectCorrespondence} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NetworkInterconnectCorrespondenceItemProvider networkInterconnectCorrespondenceItemProvider;

	/**
	 * This creates an adapter for a {@link eu.cactosfp7.cactosim.correspondence.physicalcorrespondence.NetworkInterconnectCorrespondence}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNetworkInterconnectCorrespondenceAdapter() {
		if (networkInterconnectCorrespondenceItemProvider == null) {
			networkInterconnectCorrespondenceItemProvider = new NetworkInterconnectCorrespondenceItemProvider(this);
		}

		return networkInterconnectCorrespondenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link eu.cactosfp7.cactosim.correspondence.physicalcorrespondence.ProcessingUnitSpecificationCorrespondence} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ProcessingUnitSpecificationCorrespondenceItemProvider processingUnitSpecificationCorrespondenceItemProvider;

	/**
	 * This creates an adapter for a {@link eu.cactosfp7.cactosim.correspondence.physicalcorrespondence.ProcessingUnitSpecificationCorrespondence}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createProcessingUnitSpecificationCorrespondenceAdapter() {
		if (processingUnitSpecificationCorrespondenceItemProvider == null) {
			processingUnitSpecificationCorrespondenceItemProvider = new ProcessingUnitSpecificationCorrespondenceItemProvider(this);
		}

		return processingUnitSpecificationCorrespondenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link eu.cactosfp7.cactosim.correspondence.physicalcorrespondence.PowerConsumingEntityMeasurementCorrespondence} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PowerConsumingEntityMeasurementCorrespondenceItemProvider powerConsumingEntityMeasurementCorrespondenceItemProvider;

	/**
	 * This creates an adapter for a {@link eu.cactosfp7.cactosim.correspondence.physicalcorrespondence.PowerConsumingEntityMeasurementCorrespondence}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPowerConsumingEntityMeasurementCorrespondenceAdapter() {
		if (powerConsumingEntityMeasurementCorrespondenceItemProvider == null) {
			powerConsumingEntityMeasurementCorrespondenceItemProvider = new PowerConsumingEntityMeasurementCorrespondenceItemProvider(this);
		}

		return powerConsumingEntityMeasurementCorrespondenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link eu.cactosfp7.cactosim.correspondence.physicalcorrespondence.PowerProvidingEntityCorrespondence} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PowerProvidingEntityCorrespondenceItemProvider powerProvidingEntityCorrespondenceItemProvider;

	/**
	 * This creates an adapter for a {@link eu.cactosfp7.cactosim.correspondence.physicalcorrespondence.PowerProvidingEntityCorrespondence}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPowerProvidingEntityCorrespondenceAdapter() {
		if (powerProvidingEntityCorrespondenceItemProvider == null) {
			powerProvidingEntityCorrespondenceItemProvider = new PowerProvidingEntityCorrespondenceItemProvider(this);
		}

		return powerProvidingEntityCorrespondenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link eu.cactosfp7.cactosim.correspondence.physicalcorrespondence.PowerConsumingResourceCorrespondence} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PowerConsumingResourceCorrespondenceItemProvider powerConsumingResourceCorrespondenceItemProvider;

	/**
	 * This creates an adapter for a {@link eu.cactosfp7.cactosim.correspondence.physicalcorrespondence.PowerConsumingResourceCorrespondence}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPowerConsumingResourceCorrespondenceAdapter() {
		if (powerConsumingResourceCorrespondenceItemProvider == null) {
			powerConsumingResourceCorrespondenceItemProvider = new PowerConsumingResourceCorrespondenceItemProvider(this);
		}

		return powerConsumingResourceCorrespondenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link eu.cactosfp7.cactosim.correspondence.physicalcorrespondence.ArchitectureTypeCorrespondence} instances.
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @generated
	 */
    protected ArchitectureTypeCorrespondenceItemProvider architectureTypeCorrespondenceItemProvider;

    /**
	 * This creates an adapter for a {@link eu.cactosfp7.cactosim.correspondence.physicalcorrespondence.ArchitectureTypeCorrespondence}.
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @generated
	 */
    @Override
    public Adapter createArchitectureTypeCorrespondenceAdapter() {
		if (architectureTypeCorrespondenceItemProvider == null) {
			architectureTypeCorrespondenceItemProvider = new ArchitectureTypeCorrespondenceItemProvider(this);
		}

		return architectureTypeCorrespondenceItemProvider;
	}

    /**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (puMeasurementCorrespondenceItemProvider != null) puMeasurementCorrespondenceItemProvider.dispose();
		if (memoryMeasurementCorrespondenceItemProvider != null) memoryMeasurementCorrespondenceItemProvider.dispose();
		if (storageMeasurementCorrespondenceItemProvider != null) storageMeasurementCorrespondenceItemProvider.dispose();
		if (interconnectMeasurementCorrespondenceItemProvider != null) interconnectMeasurementCorrespondenceItemProvider.dispose();
		if (physicalCorrespondenceRepositoryItemProvider != null) physicalCorrespondenceRepositoryItemProvider.dispose();
		if (switchCorrespondenceItemProvider != null) switchCorrespondenceItemProvider.dispose();
		if (rackCorrespondenceItemProvider != null) rackCorrespondenceItemProvider.dispose();
		if (abstractNodeCorrespondenceItemProvider != null) abstractNodeCorrespondenceItemProvider.dispose();
		if (memorySpecificationCorrespondenceItemProvider != null) memorySpecificationCorrespondenceItemProvider.dispose();
		if (storageSpecificationCorrespondenceItemProvider != null) storageSpecificationCorrespondenceItemProvider.dispose();
		if (networkInterconnectCorrespondenceItemProvider != null) networkInterconnectCorrespondenceItemProvider.dispose();
		if (processingUnitSpecificationCorrespondenceItemProvider != null) processingUnitSpecificationCorrespondenceItemProvider.dispose();
		if (powerConsumingEntityMeasurementCorrespondenceItemProvider != null) powerConsumingEntityMeasurementCorrespondenceItemProvider.dispose();
		if (powerProvidingEntityCorrespondenceItemProvider != null) powerProvidingEntityCorrespondenceItemProvider.dispose();
		if (powerConsumingResourceCorrespondenceItemProvider != null) powerConsumingResourceCorrespondenceItemProvider.dispose();
		if (architectureTypeCorrespondenceItemProvider != null) architectureTypeCorrespondenceItemProvider.dispose();
	}

}
