/**
 */
package eu.cactosfp7.cactosim.correspondence.logicalcorrespondence.provider;

import eu.cactosfp7.cactosim.correspondence.logicalcorrespondence.util.LogicalcorrespondenceAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class LogicalcorrespondenceItemProviderAdapterFactory extends LogicalcorrespondenceAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public LogicalcorrespondenceItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link eu.cactosfp7.cactosim.correspondence.logicalcorrespondence.VirtualMemoryMeasurementCorrespondence} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VirtualMemoryMeasurementCorrespondenceItemProvider virtualMemoryMeasurementCorrespondenceItemProvider;

	/**
	 * This creates an adapter for a {@link eu.cactosfp7.cactosim.correspondence.logicalcorrespondence.VirtualMemoryMeasurementCorrespondence}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVirtualMemoryMeasurementCorrespondenceAdapter() {
		if (virtualMemoryMeasurementCorrespondenceItemProvider == null) {
			virtualMemoryMeasurementCorrespondenceItemProvider = new VirtualMemoryMeasurementCorrespondenceItemProvider(this);
		}

		return virtualMemoryMeasurementCorrespondenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link eu.cactosfp7.cactosim.correspondence.logicalcorrespondence.VirtualNetworkInterconnectMeasurementCorrespondence} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VirtualNetworkInterconnectMeasurementCorrespondenceItemProvider virtualNetworkInterconnectMeasurementCorrespondenceItemProvider;

	/**
	 * This creates an adapter for a {@link eu.cactosfp7.cactosim.correspondence.logicalcorrespondence.VirtualNetworkInterconnectMeasurementCorrespondence}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVirtualNetworkInterconnectMeasurementCorrespondenceAdapter() {
		if (virtualNetworkInterconnectMeasurementCorrespondenceItemProvider == null) {
			virtualNetworkInterconnectMeasurementCorrespondenceItemProvider = new VirtualNetworkInterconnectMeasurementCorrespondenceItemProvider(this);
		}

		return virtualNetworkInterconnectMeasurementCorrespondenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link eu.cactosfp7.cactosim.correspondence.logicalcorrespondence.VirtualProcessingUnitMeasurementCorrespondence} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VirtualProcessingUnitMeasurementCorrespondenceItemProvider virtualProcessingUnitMeasurementCorrespondenceItemProvider;

	/**
	 * This creates an adapter for a {@link eu.cactosfp7.cactosim.correspondence.logicalcorrespondence.VirtualProcessingUnitMeasurementCorrespondence}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVirtualProcessingUnitMeasurementCorrespondenceAdapter() {
		if (virtualProcessingUnitMeasurementCorrespondenceItemProvider == null) {
			virtualProcessingUnitMeasurementCorrespondenceItemProvider = new VirtualProcessingUnitMeasurementCorrespondenceItemProvider(this);
		}

		return virtualProcessingUnitMeasurementCorrespondenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link eu.cactosfp7.cactosim.correspondence.logicalcorrespondence.LogicalDiskReadMeasurementCorrespondence} instances.
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @generated
	 */
    protected LogicalDiskReadMeasurementCorrespondenceItemProvider logicalDiskReadMeasurementCorrespondenceItemProvider;

    /**
	 * This creates an adapter for a {@link eu.cactosfp7.cactosim.correspondence.logicalcorrespondence.LogicalDiskReadMeasurementCorrespondence}.
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @generated
	 */
    @Override
    public Adapter createLogicalDiskReadMeasurementCorrespondenceAdapter() {
		if (logicalDiskReadMeasurementCorrespondenceItemProvider == null) {
			logicalDiskReadMeasurementCorrespondenceItemProvider = new LogicalDiskReadMeasurementCorrespondenceItemProvider(this);
		}

		return logicalDiskReadMeasurementCorrespondenceItemProvider;
	}

    /**
	 * This keeps track of the one adapter used for all {@link eu.cactosfp7.cactosim.correspondence.logicalcorrespondence.LogicalDiskWriteMeasurementCorrespondence} instances.
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @generated
	 */
    protected LogicalDiskWriteMeasurementCorrespondenceItemProvider logicalDiskWriteMeasurementCorrespondenceItemProvider;

    /**
	 * This creates an adapter for a {@link eu.cactosfp7.cactosim.correspondence.logicalcorrespondence.LogicalDiskWriteMeasurementCorrespondence}.
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @generated
	 */
    @Override
    public Adapter createLogicalDiskWriteMeasurementCorrespondenceAdapter() {
		if (logicalDiskWriteMeasurementCorrespondenceItemProvider == null) {
			logicalDiskWriteMeasurementCorrespondenceItemProvider = new LogicalDiskWriteMeasurementCorrespondenceItemProvider(this);
		}

		return logicalDiskWriteMeasurementCorrespondenceItemProvider;
	}

    /**
	 * This keeps track of the one adapter used for all {@link eu.cactosfp7.cactosim.correspondence.logicalcorrespondence.LogicalCorrespondenceRepository} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LogicalCorrespondenceRepositoryItemProvider logicalCorrespondenceRepositoryItemProvider;

	/**
	 * This creates an adapter for a {@link eu.cactosfp7.cactosim.correspondence.logicalcorrespondence.LogicalCorrespondenceRepository}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLogicalCorrespondenceRepositoryAdapter() {
		if (logicalCorrespondenceRepositoryItemProvider == null) {
			logicalCorrespondenceRepositoryItemProvider = new LogicalCorrespondenceRepositoryItemProvider(this);
		}

		return logicalCorrespondenceRepositoryItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link eu.cactosfp7.cactosim.correspondence.logicalcorrespondence.VMImageInstanceCorrespondence} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VMImageInstanceCorrespondenceItemProvider vmImageInstanceCorrespondenceItemProvider;

	/**
	 * This creates an adapter for a {@link eu.cactosfp7.cactosim.correspondence.logicalcorrespondence.VMImageInstanceCorrespondence}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVMImageInstanceCorrespondenceAdapter() {
		if (vmImageInstanceCorrespondenceItemProvider == null) {
			vmImageInstanceCorrespondenceItemProvider = new VMImageInstanceCorrespondenceItemProvider(this);
		}

		return vmImageInstanceCorrespondenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link eu.cactosfp7.cactosim.correspondence.logicalcorrespondence.VMImageCorrespondence} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VMImageCorrespondenceItemProvider vmImageCorrespondenceItemProvider;

	/**
	 * This creates an adapter for a {@link eu.cactosfp7.cactosim.correspondence.logicalcorrespondence.VMImageCorrespondence}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVMImageCorrespondenceAdapter() {
		if (vmImageCorrespondenceItemProvider == null) {
			vmImageCorrespondenceItemProvider = new VMImageCorrespondenceItemProvider(this);
		}

		return vmImageCorrespondenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link eu.cactosfp7.cactosim.correspondence.logicalcorrespondence.VirtualNetworkInterconnectCorrespondence} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VirtualNetworkInterconnectCorrespondenceItemProvider virtualNetworkInterconnectCorrespondenceItemProvider;

	/**
	 * This creates an adapter for a {@link eu.cactosfp7.cactosim.correspondence.logicalcorrespondence.VirtualNetworkInterconnectCorrespondence}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVirtualNetworkInterconnectCorrespondenceAdapter() {
		if (virtualNetworkInterconnectCorrespondenceItemProvider == null) {
			virtualNetworkInterconnectCorrespondenceItemProvider = new VirtualNetworkInterconnectCorrespondenceItemProvider(this);
		}

		return virtualNetworkInterconnectCorrespondenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link eu.cactosfp7.cactosim.correspondence.logicalcorrespondence.VirtualMachineCorrespondence} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VirtualMachineCorrespondenceItemProvider virtualMachineCorrespondenceItemProvider;

	/**
	 * This creates an adapter for a {@link eu.cactosfp7.cactosim.correspondence.logicalcorrespondence.VirtualMachineCorrespondence}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVirtualMachineCorrespondenceAdapter() {
		if (virtualMachineCorrespondenceItemProvider == null) {
			virtualMachineCorrespondenceItemProvider = new VirtualMachineCorrespondenceItemProvider(this);
		}

		return virtualMachineCorrespondenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link eu.cactosfp7.cactosim.correspondence.logicalcorrespondence.HypervisorCorrespondence} instances.
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @generated
	 */
    protected HypervisorCorrespondenceItemProvider hypervisorCorrespondenceItemProvider;

    /**
	 * This creates an adapter for a {@link eu.cactosfp7.cactosim.correspondence.logicalcorrespondence.HypervisorCorrespondence}.
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @generated
	 */
    @Override
    public Adapter createHypervisorCorrespondenceAdapter() {
		if (hypervisorCorrespondenceItemProvider == null) {
			hypervisorCorrespondenceItemProvider = new HypervisorCorrespondenceItemProvider(this);
		}

		return hypervisorCorrespondenceItemProvider;
	}

    /**
	 * This keeps track of the one adapter used for all {@link eu.cactosfp7.cactosim.correspondence.logicalcorrespondence.NetworkAttachedStorageCorrespondence} instances.
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @generated
	 */
    protected NetworkAttachedStorageCorrespondenceItemProvider networkAttachedStorageCorrespondenceItemProvider;

    /**
	 * This creates an adapter for a {@link eu.cactosfp7.cactosim.correspondence.logicalcorrespondence.NetworkAttachedStorageCorrespondence}.
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @generated
	 */
    @Override
    public Adapter createNetworkAttachedStorageCorrespondenceAdapter() {
		if (networkAttachedStorageCorrespondenceItemProvider == null) {
			networkAttachedStorageCorrespondenceItemProvider = new NetworkAttachedStorageCorrespondenceItemProvider(this);
		}

		return networkAttachedStorageCorrespondenceItemProvider;
	}

    /**
	 * This keeps track of the one adapter used for all {@link eu.cactosfp7.cactosim.correspondence.logicalcorrespondence.OptimisationPlanCorrespondence} instances.
	 * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
	 * @generated
	 */
        protected OptimisationPlanCorrespondenceItemProvider optimisationPlanCorrespondenceItemProvider;

/**
	 * This creates an adapter for a {@link eu.cactosfp7.cactosim.correspondence.logicalcorrespondence.OptimisationPlanCorrespondence}.
	 * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
	 * @generated
	 */
        @Override
        public Adapter createOptimisationPlanCorrespondenceAdapter() {
		if (optimisationPlanCorrespondenceItemProvider == null) {
			optimisationPlanCorrespondenceItemProvider = new OptimisationPlanCorrespondenceItemProvider(this);
		}

		return optimisationPlanCorrespondenceItemProvider;
	}

/**
	 * This keeps track of the one adapter used for all {@link eu.cactosfp7.cactosim.correspondence.logicalcorrespondence.ProvidedServiceCorrespondence} instances.
	 * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
	 * @generated
	 */
        protected ProvidedServiceCorrespondenceItemProvider providedServiceCorrespondenceItemProvider;

/**
	 * This creates an adapter for a {@link eu.cactosfp7.cactosim.correspondence.logicalcorrespondence.ProvidedServiceCorrespondence}.
	 * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
	 * @generated
	 */
        @Override
        public Adapter createProvidedServiceCorrespondenceAdapter() {
		if (providedServiceCorrespondenceItemProvider == null) {
			providedServiceCorrespondenceItemProvider = new ProvidedServiceCorrespondenceItemProvider(this);
		}

		return providedServiceCorrespondenceItemProvider;
	}

/**
	 * This keeps track of the one adapter used for all {@link eu.cactosfp7.cactosim.correspondence.logicalcorrespondence.RequiredServiceCorrespondence} instances.
	 * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
	 * @generated
	 */
        protected RequiredServiceCorrespondenceItemProvider requiredServiceCorrespondenceItemProvider;

/**
	 * This creates an adapter for a {@link eu.cactosfp7.cactosim.correspondence.logicalcorrespondence.RequiredServiceCorrespondence}.
	 * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
	 * @generated
	 */
        @Override
        public Adapter createRequiredServiceCorrespondenceAdapter() {
		if (requiredServiceCorrespondenceItemProvider == null) {
			requiredServiceCorrespondenceItemProvider = new RequiredServiceCorrespondenceItemProvider(this);
		}

		return requiredServiceCorrespondenceItemProvider;
	}

/**
	 * This keeps track of the one adapter used for all {@link eu.cactosfp7.cactosim.correspondence.logicalcorrespondence.ScalableVMImageConnectorCorrespondence} instances.
	 * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
	 * @generated
	 */
        protected ScalableVMImageConnectorCorrespondenceItemProvider scalableVMImageConnectorCorrespondenceItemProvider;

/**
	 * This creates an adapter for a {@link eu.cactosfp7.cactosim.correspondence.logicalcorrespondence.ScalableVMImageConnectorCorrespondence}.
	 * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
	 * @generated
	 */
        @Override
        public Adapter createScalableVMImageConnectorCorrespondenceAdapter() {
		if (scalableVMImageConnectorCorrespondenceItemProvider == null) {
			scalableVMImageConnectorCorrespondenceItemProvider = new ScalableVMImageConnectorCorrespondenceItemProvider(this);
		}

		return scalableVMImageConnectorCorrespondenceItemProvider;
	}

/**
	 * This keeps track of the one adapter used for all {@link eu.cactosfp7.cactosim.correspondence.logicalcorrespondence.UserBehaviourCorrespondence} instances.
	 * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
	 * @generated
	 */
        protected UserBehaviourCorrespondenceItemProvider userBehaviourCorrespondenceItemProvider;

/**
	 * This creates an adapter for a {@link eu.cactosfp7.cactosim.correspondence.logicalcorrespondence.UserBehaviourCorrespondence}.
	 * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
	 * @generated
	 */
        @Override
        public Adapter createUserBehaviourCorrespondenceAdapter() {
		if (userBehaviourCorrespondenceItemProvider == null) {
			userBehaviourCorrespondenceItemProvider = new UserBehaviourCorrespondenceItemProvider(this);
		}

		return userBehaviourCorrespondenceItemProvider;
	}

/**
	 * This keeps track of the one adapter used for all {@link eu.cactosfp7.cactosim.correspondence.logicalcorrespondence.RequestArrivalRateMeasurementCorrespondence} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RequestArrivalRateMeasurementCorrespondenceItemProvider requestArrivalRateMeasurementCorrespondenceItemProvider;

/**
	 * This creates an adapter for a {@link eu.cactosfp7.cactosim.correspondence.logicalcorrespondence.RequestArrivalRateMeasurementCorrespondence}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRequestArrivalRateMeasurementCorrespondenceAdapter() {
		if (requestArrivalRateMeasurementCorrespondenceItemProvider == null) {
			requestArrivalRateMeasurementCorrespondenceItemProvider = new RequestArrivalRateMeasurementCorrespondenceItemProvider(this);
		}

		return requestArrivalRateMeasurementCorrespondenceItemProvider;
	}

/**
	 * This keeps track of the one adapter used for all {@link eu.cactosfp7.cactosim.correspondence.logicalcorrespondence.ResponseArrivalRateMeasurementCorrespondence} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ResponseArrivalRateMeasurementCorrespondenceItemProvider responseArrivalRateMeasurementCorrespondenceItemProvider;

/**
	 * This creates an adapter for a {@link eu.cactosfp7.cactosim.correspondence.logicalcorrespondence.ResponseArrivalRateMeasurementCorrespondence}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createResponseArrivalRateMeasurementCorrespondenceAdapter() {
		if (responseArrivalRateMeasurementCorrespondenceItemProvider == null) {
			responseArrivalRateMeasurementCorrespondenceItemProvider = new ResponseArrivalRateMeasurementCorrespondenceItemProvider(this);
		}

		return responseArrivalRateMeasurementCorrespondenceItemProvider;
	}

/**
	 * This keeps track of the one adapter used for all {@link eu.cactosfp7.cactosim.correspondence.logicalcorrespondence.ServiceInstanceArrivalRateMeasurementCorrespondence} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ServiceInstanceArrivalRateMeasurementCorrespondenceItemProvider serviceInstanceArrivalRateMeasurementCorrespondenceItemProvider;

/**
	 * This creates an adapter for a {@link eu.cactosfp7.cactosim.correspondence.logicalcorrespondence.ServiceInstanceArrivalRateMeasurementCorrespondence}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createServiceInstanceArrivalRateMeasurementCorrespondenceAdapter() {
		if (serviceInstanceArrivalRateMeasurementCorrespondenceItemProvider == null) {
			serviceInstanceArrivalRateMeasurementCorrespondenceItemProvider = new ServiceInstanceArrivalRateMeasurementCorrespondenceItemProvider(this);
		}

		return serviceInstanceArrivalRateMeasurementCorrespondenceItemProvider;
	}

/**
	 * This keeps track of the one adapter used for all {@link eu.cactosfp7.cactosim.correspondence.logicalcorrespondence.ServiceOperationInstanceArrivalRateMeasurementCorrespondence} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ServiceOperationInstanceArrivalRateMeasurementCorrespondenceItemProvider serviceOperationInstanceArrivalRateMeasurementCorrespondenceItemProvider;

/**
	 * This creates an adapter for a {@link eu.cactosfp7.cactosim.correspondence.logicalcorrespondence.ServiceOperationInstanceArrivalRateMeasurementCorrespondence}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createServiceOperationInstanceArrivalRateMeasurementCorrespondenceAdapter() {
		if (serviceOperationInstanceArrivalRateMeasurementCorrespondenceItemProvider == null) {
			serviceOperationInstanceArrivalRateMeasurementCorrespondenceItemProvider = new ServiceOperationInstanceArrivalRateMeasurementCorrespondenceItemProvider(this);
		}

		return serviceOperationInstanceArrivalRateMeasurementCorrespondenceItemProvider;
	}

/**
	 * This keeps track of the one adapter used for all {@link eu.cactosfp7.cactosim.correspondence.logicalcorrespondence.ServiceOperationCorrespondence} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ServiceOperationCorrespondenceItemProvider serviceOperationCorrespondenceItemProvider;

/**
	 * This creates an adapter for a {@link eu.cactosfp7.cactosim.correspondence.logicalcorrespondence.ServiceOperationCorrespondence}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createServiceOperationCorrespondenceAdapter() {
		if (serviceOperationCorrespondenceItemProvider == null) {
			serviceOperationCorrespondenceItemProvider = new ServiceOperationCorrespondenceItemProvider(this);
		}

		return serviceOperationCorrespondenceItemProvider;
	}

/**
	 * This keeps track of the one adapter used for all {@link eu.cactosfp7.cactosim.correspondence.logicalcorrespondence.ApplicationProvidedServiceCorrespondence} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ApplicationProvidedServiceCorrespondenceItemProvider applicationProvidedServiceCorrespondenceItemProvider;

/**
	 * This creates an adapter for a {@link eu.cactosfp7.cactosim.correspondence.logicalcorrespondence.ApplicationProvidedServiceCorrespondence}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createApplicationProvidedServiceCorrespondenceAdapter() {
		if (applicationProvidedServiceCorrespondenceItemProvider == null) {
			applicationProvidedServiceCorrespondenceItemProvider = new ApplicationProvidedServiceCorrespondenceItemProvider(this);
		}

		return applicationProvidedServiceCorrespondenceItemProvider;
	}

/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (virtualMemoryMeasurementCorrespondenceItemProvider != null) virtualMemoryMeasurementCorrespondenceItemProvider.dispose();
		if (virtualNetworkInterconnectMeasurementCorrespondenceItemProvider != null) virtualNetworkInterconnectMeasurementCorrespondenceItemProvider.dispose();
		if (virtualProcessingUnitMeasurementCorrespondenceItemProvider != null) virtualProcessingUnitMeasurementCorrespondenceItemProvider.dispose();
		if (logicalDiskReadMeasurementCorrespondenceItemProvider != null) logicalDiskReadMeasurementCorrespondenceItemProvider.dispose();
		if (logicalDiskWriteMeasurementCorrespondenceItemProvider != null) logicalDiskWriteMeasurementCorrespondenceItemProvider.dispose();
		if (logicalCorrespondenceRepositoryItemProvider != null) logicalCorrespondenceRepositoryItemProvider.dispose();
		if (vmImageInstanceCorrespondenceItemProvider != null) vmImageInstanceCorrespondenceItemProvider.dispose();
		if (vmImageCorrespondenceItemProvider != null) vmImageCorrespondenceItemProvider.dispose();
		if (virtualNetworkInterconnectCorrespondenceItemProvider != null) virtualNetworkInterconnectCorrespondenceItemProvider.dispose();
		if (virtualMachineCorrespondenceItemProvider != null) virtualMachineCorrespondenceItemProvider.dispose();
		if (hypervisorCorrespondenceItemProvider != null) hypervisorCorrespondenceItemProvider.dispose();
		if (networkAttachedStorageCorrespondenceItemProvider != null) networkAttachedStorageCorrespondenceItemProvider.dispose();
		if (optimisationPlanCorrespondenceItemProvider != null) optimisationPlanCorrespondenceItemProvider.dispose();
		if (providedServiceCorrespondenceItemProvider != null) providedServiceCorrespondenceItemProvider.dispose();
		if (requiredServiceCorrespondenceItemProvider != null) requiredServiceCorrespondenceItemProvider.dispose();
		if (scalableVMImageConnectorCorrespondenceItemProvider != null) scalableVMImageConnectorCorrespondenceItemProvider.dispose();
		if (userBehaviourCorrespondenceItemProvider != null) userBehaviourCorrespondenceItemProvider.dispose();
		if (requestArrivalRateMeasurementCorrespondenceItemProvider != null) requestArrivalRateMeasurementCorrespondenceItemProvider.dispose();
		if (responseArrivalRateMeasurementCorrespondenceItemProvider != null) responseArrivalRateMeasurementCorrespondenceItemProvider.dispose();
		if (serviceInstanceArrivalRateMeasurementCorrespondenceItemProvider != null) serviceInstanceArrivalRateMeasurementCorrespondenceItemProvider.dispose();
		if (serviceOperationInstanceArrivalRateMeasurementCorrespondenceItemProvider != null) serviceOperationInstanceArrivalRateMeasurementCorrespondenceItemProvider.dispose();
		if (serviceOperationCorrespondenceItemProvider != null) serviceOperationCorrespondenceItemProvider.dispose();
		if (applicationProvidedServiceCorrespondenceItemProvider != null) applicationProvidedServiceCorrespondenceItemProvider.dispose();
	}

}
