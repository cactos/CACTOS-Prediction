import transforms.cactosAdaptationBehaviorHelper;
import simulizar_qvto_helper.logHelper;

modeltype CACT_LCORE uses 'http://www.cactosfp7.eu/LogicalDCModel/Core/1.0';
modeltype CACT_APP uses 'http://www.cactosfp7.eu/LogicalDCModel/Application/1.0';
modeltype CACT_PCORE uses 'http://www.cactosfp7.eu/PhysicalDCModel/Core/1.0';
modeltype PHYSICAL_CORRESPONDENCE uses 'http://www.cactosfp7.eu/Correspondence/Physical/1.1';
modeltype LOGICAL_CORRESPONDENCE uses  'http://www.cactosfp7.eu/Correspondence/Logical/1.1';
modeltype EXPERIMENT_SCENARIO uses 'http://www.cactosfp7.eu/ExperimentScenarioModel/1.0';
modeltype EXPERIMENT_SCENARIO_REQUEST uses 'http://www.cactosfp7.eu/ExperimentScenarioModel/Request/1.0';
modeltype EXPERIMENT_SCENARIO_SELECTOR uses 'http://www.cactosfp7.eu/ExperimentScenarioModel/Selector/1.0';
modeltype ACTION_CORE uses 'http://simulizar.palladiosimulator.org/Actions/Core/1.1';
modeltype ACTION_INSTANCE uses 'http://simulizar.palladiosimulator.org/Actions/Instance/1.1';
modeltype ACTION_PARAM uses 'http://simulizar.palladiosimulator.org/Actions/Parameter/1.1';
modeltype PCM_CORE uses 'http://palladiosimulator.org/PalladioComponentModel/Core/5.1';
modeltype PCM_PARAM uses 'http://palladiosimulator.org/PalladioComponentModel/Parameter/5.1';
modeltype PCM_STOEX uses 'http://sdq.ipd.uka.de/StochasticExpressions/2.2';
modeltype ACTION_CONTEXT uses 'http://simulizar.palladiosimulator.org/Actions/Context/1.1';

transformation terminateApplicationAction(
							inout logicalDC: CACT_LCORE,
							inout actions : ACTION_CORE,
							inout actionRoleSet : ACTION_INSTANCE,
							in actionContext : ACTION_CONTEXT,
							in physicalcorrespondence: PHYSICAL_CORRESPONDENCE,
							in logicalcorrespondence: LOGICAL_CORRESPONDENCE) {
	
	property MIGRATE_APPLICATION_REQUEST_ROLE_TYPE_ID = "_pRuhNO0MEeWwk45MX11cig";
	
	main() {
		var requestRole : instance::Role := actionRoleSet.rootObjects()[RoleSet].roles->any(role | role.roleType.id = MIGRATE_APPLICATION_REQUEST_ROLE_TYPE_ID);
		var migrateRequest := requestRole.value.oclAsType(MigrateApplicationRequest);
		migrateRequest.timelineEvent.eventStatus := EventStatus::IN_EXECUTION;
		var action := selectMigrateVMAction();
		
		var migrated_vm = migrateRequest.applicationInstanceSelector.retrieveApplicationInstance().toReferencedVM();
		var roleSet := action.createMigrateVMRoleSet(
			migrateRequest.targetPhysicalNode, migrated_vm);
		
		if (action.execute(roleSet, actionContext.rootObjects()[ExecutionContext]->any(true))) then {
			logInfo("Migrate request was executed properly");	
			migrateRequest.timelineEvent.eventStatus := EventStatus::PROCESSED_SUCCESS;
		} else {
			logWarn("Migrate request was not execute properly");
			migrateRequest.timelineEvent.eventStatus := EventStatus::PROCESSED_FAILURE;
		} endif;
	};
}
								
